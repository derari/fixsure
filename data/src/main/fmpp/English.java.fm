// generated code
package org.cthul.fixsure.data;

import java.util.Arrays;
import java.util.stream.Collectors;
import org.cthul.fixsure.Sequence;
import org.cthul.fixsure.fluents.FlSequence;
import org.cthul.fixsure.fluents.BiSequence;
import static org.cthul.fixsure.Fixsure.*;


/**
 *
 */
public class English {

    /**
     * Returns a {@link Sequence} of popular first names.
     * @return sequence of names
     */
<@data_string_sequence_filter "firstNames", "en/FirstNames.txt", "true", 2 />

    /**
     * Returns a sorted {@link Sequence} of popular first names.
     * @return sequence of names
     */
<@data_string_sequence_src "sortedFirstNames">sequence(sorted(firstNames()))</@>

    /**
     * Returns a {@link Sequence} of popular male first names.
     * @return sequence of names
     */
<@data_string_sequence_filter "maleFirstNames", "en/FirstNames.txt", "s.startsWith(\"M;\")", 2 />

    /**
     * Returns a sorted {@link Sequence} of popular male first names.
     * @return sequence of names
     */
<@data_string_sequence_src "sortedMaleFirstNames">sequence(sorted(maleFirstNames()))</@>

    /**
     * Returns a {@link Sequence} of popular female first names.
     * @return sequence of names
     */
<@data_string_sequence_filter "femaleFirstNames", "en/FirstNames.txt", "s.startsWith(\"F;\")", 2 />

    /**
     * Returns a sorted {@link Sequence} of popular female first names.
     * @return sequence of names
     */
<@data_string_sequence_src "sortedFemaleFirstNames">sequence(sorted(femaleFirstNames()))</@>

    /**
     * Returns a {@link Sequence} of popular last names.
     * @return sequence of names
     */
<@data_string_sequence "lastNames", "en/LastNames.txt" />

    /**
     * Returns a sorted {@link Sequence} of popular last names.
     * @return sequence of names
     */
<@data_string_sequence_src "sortedLastNames">sequence(sorted(lastNames()))</@>

    /**
     * Returns a {@link BiSequence} of popular first names,
     * with a character signifying the gender ('M' or 'F').
     * @return sequence of names and gender
     */
    public static BiSequence<String, Character> firstNamesWithGender() {
        if (SEQ_firstNamesWithGender == null) {
            Character[] genders = Arrays.stream(DataLoader.readLines(<@thisclass/>, "en/FirstNames.txt"))
                    .map(s -> s.charAt(0))
                    .collect(Collectors.toList())
                    .toArray(new Character[0]);
            SEQ_firstNamesWithGender = firstNames().with(sequence(genders));
        }
        return SEQ_firstNamesWithGender;
    }
    private static BiSequence<String, Character> SEQ_firstNamesWithGender;

    /**
     * Returns a {@link Sequence} of first names with initial letters from A to Z.
     * @return sequence of names
     */
<@data_string_sequence "aliceBob", "en/AliceBob.txt" />

    /**
     * Returns a {@link Sequence} of first names with initial letters from A to Z,
     * with a character signifying the gender ('M' or 'F').
     * @return sequence of names and gender
     */    
    public static BiSequence<String, Character> aliceBobWithGender() {
        if (SEQ_aliceBobWithGender == null) {
            SEQ_aliceBobWithGender = aliceBob()
                    .with(Sequence.sequence(n -> (n < 12) ^ (n % 2 == 0) ? 'M' : 'F'));
        }
        return SEQ_aliceBobWithGender;
    }
    private static BiSequence<String, Character> SEQ_aliceBobWithGender;

    /**
     * Returns a {@link Sequence} of fruits with initial letters from A to Z.
     * @return sequence of names
     */
<@data_string_sequence "fruitsA2Z", "en/FruitsA2Z.txt" />

    /**
     * Returns a {@link Sequence} of vegetables with initial letters from A to Z.
     * @return sequence of names
     */
<@data_string_sequence "vegetablesA2Z", "en/VegetablesA2Z.txt" />

<#--
    protected static String[] merge(final String[] a1, final String[] a2) {
        String[] result = Arrays.copyOf(a1, a1.length + a2.length);
        System.arraycopy(a2, 0, result, a1.length, a2.length);
        Arrays.sort(result);
        return result;
    }

    protected static String[] sorted(final String[] a1) {
        String[] result = a1.clone();
        Arrays.sort(result);
        return result;
    }-->

    protected static String[] sorted(FlSequence<String> a1) {
        String[] result = a1.all().toArray();
        Arrays.sort(result);
        return result;
    }

    private static final String BLIND_TEXT = "This is a blind text.";
    private static final String[] BLIND_TEXT_WORDS = BLIND_TEXT.split(" ");

    /**
     * Returns a {@link Sequence} of words that form an english blind text.
     * @return sequence of words
     */
<@data_string_sequence_src "blindTextWords">sequence(BLIND_TEXT_WORDS)</@>
    
}
<#macro thisclass>English.class</#macro>
<#t>
<#macro data_string_sequence_filter name file filter n>
    <@data_string_sequence_src name>
sequence(Arrays.stream(DataLoader.readLines(<@thisclass/>, "${file}"))
                    .filter(s -> ${filter})
                    .map(s -> s.substring(${n}))
                    .collect(Collectors.toList())
                    .toArray(new String[0]))</@>
</#macro>
<#t>
<#macro data_string_sequence name file>
    <@data_string_sequence_src name>
sequence(DataLoader.readLines(<@thisclass/>, "${file}"))</@>
</#macro>
<#t>
<#macro data_string_sequence_src name>
    public static FlSequence<String> ${name}() {
        if (SEQ_${name} == null) {
            SEQ_${name} = <#nested/>;
        }
        return SEQ_${name};
    }
    private static FlSequence<String> SEQ_${name} = null;<#rt>
</#macro>
<#t>
<#macro normal_sorted_array name>
<@normal_array name />
    public static FlSequence<String> sorted${name?cap_first}() {
        return sequence(sorted${name?cap_first}Array());
    }

</#macro>
<#macro normal_array name>
    public static FlSequence<String> ${name?uncap_first}() {
        return sequence(${name?uncap_first}Array());
    }

</#macro>